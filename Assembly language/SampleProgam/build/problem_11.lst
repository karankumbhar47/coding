     1                                  %include "io.mac"
     2                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     3                              <1> extern   proc_GetStr, proc_GetCh
     4                              <1> extern   proc_PutInt, proc_GetInt
     5                              <1> extern   proc_PutLInt, proc_GetLInt
     6                              <1> 
     7                              <1> ;;-------------------------------------------------------------------
     8                              <1> %macro  .STARTUP  0
     9                              <1> ;group dgroup .data .bss
    10                              <1>         global   _start
    11                              <1> _start:
    12                              <1> %endmacro
    13                              <1> ;;-------------------------------------------------------------------
    14                              <1> 
    15                              <1> 
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> %macro  .EXIT  0
    18                              <1>         mov    EAX,1
    19                              <1>         xor    EBX,EBX
    20                              <1>         int    0x80
    21                              <1> %endmacro
    22                              <1> ;;-------------------------------------------------------------------
    23                              <1> 
    24                              <1> 
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> %macro  .DATA 0
    27                              <1>         segment .data
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> ;;-------------------------------------------------------------------
    32                              <1> %macro  .UDATA 0
    33                              <1>         segment .bss
    34                              <1> %endmacro
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> 
    37                              <1> ;;-------------------------------------------------------------------
    38                              <1> %macro  .CODE 0
    39                              <1>         segment .data
    40                              <1>         segment .bss
    41                              <1>         segment .text
    42                              <1> %endmacro
    43                              <1> ;;-------------------------------------------------------------------
    44                              <1> 
    45                              <1> 
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> %macro  nwln  0 
    48                              <1>         call    proc_nwln
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  PutCh  1 
    55                              <1>         push    AX
    56                              <1>         mov     AL,%1
    57                              <1>         call    proc_PutCh
    58                              <1>         pop     AX
    59                              <1> %endmacro
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> 
    62                              <1> 
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> %macro  PutStr  1 
    65                              <1>         push    ECX
    66                              <1>         mov     ECX,%1
    67                              <1>         call    proc_PutStr
    68                              <1>         pop     ECX
    69                              <1> %endmacro
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> 
    72                              <1> 
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> %macro  GetStr  1-2 81
    75                              <1>         push    ESI
    76                              <1>         push    EDI
    77                              <1>         mov     EDI,%1
    78                              <1>         mov     ESI,%2
    79                              <1>         call    proc_GetStr
    80                              <1>         pop     EDI
    81                              <1>         pop     ESI
    82                              <1> %endmacro
    83                              <1> ;;-------------------------------------------------------------------
    84                              <1> 
    85                              <1> 
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> %macro  GetCh   1
    88                              <1>         push    SI
    89                              <1>         xor     SI,SI
    90                              <1> %ifidni %1,AL
    91                              <1>         ;inc     SI
    92                              <1>         call    proc_GetCh
    93                              <1> %elifidni %1,AH
    94                              <1>         mov     SI,1
    95                              <1>         call    proc_GetCh
    96                              <1> %else
    97                              <1>         push    AX
    98                              <1>         call    proc_GetCh
    99                              <1>         mov     %1,AL
   100                              <1>         pop     AX
   101                              <1> %endif
   102                              <1>         pop     SI
   103                              <1> %endmacro
   104                              <1> ;;-------------------------------------------------------------------
   105                              <1> 
   106                              <1> 
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> %macro  PutInt  1
   109                              <1>         push    AX
   110                              <1>         mov     AX,%1
   111                              <1>         call    proc_PutInt
   112                              <1>         pop     AX
   113                              <1> %endmacro
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> 
   116                              <1> 
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> %macro  GetInt  1
   119                              <1> %ifnidni %1,AX
   120                              <1>         push    AX
   121                              <1>         call    proc_GetInt
   122                              <1>         mov     %1,AX
   123                              <1> 	  pop     AX
   124                              <1> %else 
   125                              <1>         call  proc_GetInt
   126                              <1> %endif
   127                              <1> %endmacro
   128                              <1> ;;-------------------------------------------------------------------
   129                              <1> 
   130                              <1> ;;-------------------------------------------------------------------
   131                              <1> %macro  PutLInt  1
   132                              <1>         push    EAX
   133                              <1>         mov     EAX,%1
   134                              <1>         call    proc_PutLInt
   135                              <1>         pop     EAX
   136                              <1> %endmacro
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> 
   139                              <1> ;;-------------------------------------------------------------------
   140                              <1> %macro  GetLInt  1
   141                              <1> %ifnidni %1,EAX
   142                              <1>         push    EAX
   143                              <1>         call    proc_GetLInt
   144                              <1>         mov     %1,EAX
   145                              <1> 	  pop     EAX
   146                              <1> %else 
   147                              <1>         call  proc_GetLInt
   148                              <1> %endif
   149                              <1> %endmacro
   150                              <1> ;;-------------------------------------------------------------------
   151                              <1> 
     2                                  
     3                                  .DATA
    27                              <1>  segment .data
     4 00000000 506C6561736520656E-     msg1_enterString     db     "Please enter string : ",0
     4 00000009 74657220737472696E-
     4 00000012 67203A2000         
     5 00000017 496620796F75207761-     msg2_repeat          db     "If you want to terminate press y: ",0
     5 00000020 6E7420746F20746572-
     5 00000029 6D696E617465207072-
     5 00000032 65737320793A2000   
     6                                  
     7                                  .UDATA
    33                              <1>  segment .bss
     8 00000000 ????                    string    resw   1
     9 00000002 ????                    termn     resw   1
    10                                  
    11                                  .CODE
    39                              <1>  segment .data
    40                              <1>  segment .bss
    41                              <1>  segment .text
    12                                      .STARTUP
     9                              <1> 
    10                              <1>  global _start
    11                              <1> _start:
    13                                  
    14                                  start:
    15                                      PutStr  msg1_enterString
    65 00000000 51                  <1>  push ECX
    66 00000001 B9[00000000]        <1>  mov ECX,%1
    67 00000006 E8(00000000)        <1>  call proc_PutStr
    68 0000000B 59                  <1>  pop ECX
    16                                      nwln
    48 0000000C E8(00000000)        <1>  call proc_nwln
    17                                      GetStr string
    75 00000011 56                  <1>  push ESI
    76 00000012 57                  <1>  push EDI
    77 00000013 BF[00000000]        <1>  mov EDI,%1
    78 00000018 BE51000000          <1>  mov ESI,%2
    79 0000001D E8(00000000)        <1>  call proc_GetStr
    80 00000022 5F                  <1>  pop EDI
    81 00000023 5E                  <1>  pop ESI
    18 00000024 BB[00000000]                mov EBX,string
    19 00000029 8A1B                        mov BL,[EBX]
    20                                  Loop_start:
    21 0000002B 80FB30                      cmp BL,"0"
    22 0000002E 7510                        jne f1
    23                                      PutCh 'X'
    55 00000030 6650                <1>  push AX
    56 00000032 B058                <1>  mov AL,%1
    57 00000034 E8(00000000)        <1>  call proc_PutCh
    58 00000039 6658                <1>  pop AX
    24 0000003B E9B5000000                  jmp f
    25                                  
    26                                  f1:     
    27 00000040 80FB31                      cmp BL, "1"
    28 00000043 7510                        jne f2  
    29                                      PutCh "Y"
    55 00000045 6650                <1>  push AX
    56 00000047 B059                <1>  mov AL,%1
    57 00000049 E8(00000000)        <1>  call proc_PutCh
    58 0000004E 6658                <1>  pop AX
    30 00000050 E9A0000000                  jmp f
    31                                  f2:     
    32 00000055 80FB32                      cmp BL, "2"
    33 00000058 7510                        jne f3  
    34                                      PutCh "Z"
    55 0000005A 6650                <1>  push AX
    56 0000005C B05A                <1>  mov AL,%1
    57 0000005E E8(00000000)        <1>  call proc_PutCh
    58 00000063 6658                <1>  pop AX
    35 00000065 E98B000000                  jmp f
    36                                  f3:     
    37 0000006A 80FB33                      cmp BL, "3"
    38 0000006D 750D                        jne f4 
    39                                      PutCh "A"
    55 0000006F 6650                <1>  push AX
    56 00000071 B041                <1>  mov AL,%1
    57 00000073 E8(00000000)        <1>  call proc_PutCh
    58 00000078 6658                <1>  pop AX
    40 0000007A EB79                        jmp f
    41                                  f4:     
    42 0000007C 80FB34                      cmp BL, "4"
    43 0000007F 750D                        jne f5 
    44                                      PutCh "B"
    55 00000081 6650                <1>  push AX
    56 00000083 B042                <1>  mov AL,%1
    57 00000085 E8(00000000)        <1>  call proc_PutCh
    58 0000008A 6658                <1>  pop AX
    45 0000008C EB67                        jmp f
    46                                  f5:     
    47 0000008E 80FB35                      cmp BL, "5"
    48 00000091 750D                        jne f6  
    49                                      PutCh "C"
    55 00000093 6650                <1>  push AX
    56 00000095 B043                <1>  mov AL,%1
    57 00000097 E8(00000000)        <1>  call proc_PutCh
    58 0000009C 6658                <1>  pop AX
    50 0000009E EB55                        jmp f
    51                                  f6:     
    52 000000A0 80FB36                      cmp BL, "6"
    53 000000A3 750D                        jne f7  
    54                                      PutCh "D"
    55 000000A5 6650                <1>  push AX
    56 000000A7 B044                <1>  mov AL,%1
    57 000000A9 E8(00000000)        <1>  call proc_PutCh
    58 000000AE 6658                <1>  pop AX
    55 000000B0 EB43                        jmp f
    56                                  f7:     
    57 000000B2 80FB37                      cmp BL, "7"
    58 000000B5 750D                        jne f8  
    59                                      PutCh "E"
    55 000000B7 6650                <1>  push AX
    56 000000B9 B045                <1>  mov AL,%1
    57 000000BB E8(00000000)        <1>  call proc_PutCh
    58 000000C0 6658                <1>  pop AX
    60 000000C2 EB31                        jmp f
    61                                  f8:     
    62 000000C4 80FB38                      cmp BL, "8"
    63 000000C7 750D                        jne f9  
    64                                      PutCh "F"
    55 000000C9 6650                <1>  push AX
    56 000000CB B046                <1>  mov AL,%1
    57 000000CD E8(00000000)        <1>  call proc_PutCh
    58 000000D2 6658                <1>  pop AX
    65 000000D4 EB1F                        jmp f
    66                                  f9:     
    67 000000D6 80FB39                      cmp BL, "9"
    68 000000D9 750D                        jne f10
    69                                      PutCh "0"
    55 000000DB 6650                <1>  push AX
    56 000000DD B030                <1>  mov AL,%1
    57 000000DF E8(00000000)        <1>  call proc_PutCh
    58 000000E4 6658                <1>  pop AX
    70 000000E6 EB0D                        jmp f
    71                                  f10:
    72                                      PutCh BL
    55 000000E8 6650                <1>  push AX
    56 000000EA 88D8                <1>  mov AL,%1
    57 000000EC E8(00000000)        <1>  call proc_PutCh
    58 000000F1 6658                <1>  pop AX
    73 000000F3 EB00                        jmp f
    74                                  
    75 000000F5 43                      f:  inc EBX
    76 000000F6 8A1B                        mov  BL,[EBX]
    77 000000F8 80FB00                      cmp byte BL,0
    78 000000FB 0F852AFFFFFF                jne Loop_start
    79                                      nwln
    48 00000101 E8(00000000)        <1>  call proc_nwln
    80                                      
    81                                  repeat:
    82                                      PutStr msg2_repeat
    65 00000106 51                  <1>  push ECX
    66 00000107 B9[17000000]        <1>  mov ECX,%1
    67 0000010C E8(00000000)        <1>  call proc_PutStr
    68 00000111 59                  <1>  pop ECX
    83                                      GetStr  termn
    75 00000112 56                  <1>  push ESI
    76 00000113 57                  <1>  push EDI
    77 00000114 BF[02000000]        <1>  mov EDI,%1
    78 00000119 BE51000000          <1>  mov ESI,%2
    79 0000011E E8(00000000)        <1>  call proc_GetStr
    80 00000123 5F                  <1>  pop EDI
    81 00000124 5E                  <1>  pop ESI
    84 00000125 803D[02000000]79            cmp byte [termn],"y"
    85 0000012C 740D                        je done
    86 0000012E 803D[02000000]59            cmp byte [termn],"Y"
    87 00000135 0F85C5FEFFFF                jne start
    88                                  
    89                                  done:
    90                                    .EXIT
    18 0000013B B801000000          <1>  mov EAX,1
    19 00000140 31DB                <1>  xor EBX,EBX
    20 00000142 CD80                <1>  int 0x80
