     1                                  
     2                                  %include "io.mac"
     3                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     4                              <1> extern   proc_GetStr, proc_GetCh
     5                              <1> extern   proc_PutInt, proc_GetInt
     6                              <1> extern   proc_PutLInt, proc_GetLInt
     7                              <1> 
     8                              <1> ;;-------------------------------------------------------------------
     9                              <1> %macro  .STARTUP  0
    10                              <1> ;group dgroup .data .bss
    11                              <1>         global   _start
    12                              <1> _start:
    13                              <1> %endmacro
    14                              <1> ;;-------------------------------------------------------------------
    15                              <1> 
    16                              <1> 
    17                              <1> ;;-------------------------------------------------------------------
    18                              <1> %macro  .EXIT  0
    19                              <1>         mov    EAX,1
    20                              <1>         xor    EBX,EBX
    21                              <1>         int    0x80
    22                              <1> %endmacro
    23                              <1> ;;-------------------------------------------------------------------
    24                              <1> 
    25                              <1> 
    26                              <1> ;;-------------------------------------------------------------------
    27                              <1> %macro  .DATA 0
    28                              <1>         segment .data
    29                              <1> %endmacro
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> 
    32                              <1> ;;-------------------------------------------------------------------
    33                              <1> %macro  .UDATA 0
    34                              <1>         segment .bss
    35                              <1> %endmacro
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> 
    38                              <1> ;;-------------------------------------------------------------------
    39                              <1> %macro  .CODE 0
    40                              <1>         segment .data
    41                              <1>         segment .bss
    42                              <1>         segment .text
    43                              <1> %endmacro
    44                              <1> ;;-------------------------------------------------------------------
    45                              <1> 
    46                              <1> 
    47                              <1> ;;-------------------------------------------------------------------
    48                              <1> %macro  nwln  0 
    49                              <1>         call    proc_nwln
    50                              <1> %endmacro
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> 
    53                              <1> 
    54                              <1> ;;-------------------------------------------------------------------
    55                              <1> %macro  PutCh  1 
    56                              <1>         push    AX
    57                              <1>         mov     AL,%1
    58                              <1>         call    proc_PutCh
    59                              <1>         pop     AX
    60                              <1> %endmacro
    61                              <1> ;;-------------------------------------------------------------------
    62                              <1> 
    63                              <1> 
    64                              <1> ;;-------------------------------------------------------------------
    65                              <1> %macro  PutStr  1 
    66                              <1>         push    ECX
    67                              <1>         mov     ECX,%1
    68                              <1>         call    proc_PutStr
    69                              <1>         pop     ECX
    70                              <1> %endmacro
    71                              <1> ;;-------------------------------------------------------------------
    72                              <1> 
    73                              <1> 
    74                              <1> ;;-------------------------------------------------------------------
    75                              <1> %macro  GetStr  1-2 81
    76                              <1>         push    ESI
    77                              <1>         push    EDI
    78                              <1>         mov     EDI,%1
    79                              <1>         mov     ESI,%2
    80                              <1>         call    proc_GetStr
    81                              <1>         pop     EDI
    82                              <1>         pop     ESI
    83                              <1> %endmacro
    84                              <1> ;;-------------------------------------------------------------------
    85                              <1> 
    86                              <1> 
    87                              <1> ;;-------------------------------------------------------------------
    88                              <1> %macro  GetCh   1
    89                              <1>         push    SI
    90                              <1>         xor     SI,SI
    91                              <1> %ifidni %1,AL
    92                              <1>         ;inc     SI
    93                              <1>         call    proc_GetCh
    94                              <1> %elifidni %1,AH
    95                              <1>         mov     SI,1
    96                              <1>         call    proc_GetCh
    97                              <1> %else
    98                              <1>         push    AX
    99                              <1>         call    proc_GetCh
   100                              <1>         mov     %1,AL
   101                              <1>         pop     AX
   102                              <1> %endif
   103                              <1>         pop     SI
   104                              <1> %endmacro
   105                              <1> ;;-------------------------------------------------------------------
   106                              <1> 
   107                              <1> 
   108                              <1> ;;-------------------------------------------------------------------
   109                              <1> %macro  PutInt  1
   110                              <1>         push    AX
   111                              <1>         mov     AX,%1
   112                              <1>         call    proc_PutInt
   113                              <1>         pop     AX
   114                              <1> %endmacro
   115                              <1> ;;-------------------------------------------------------------------
   116                              <1> 
   117                              <1> 
   118                              <1> ;;-------------------------------------------------------------------
   119                              <1> %macro  GetInt  1
   120                              <1> %ifnidni %1,AX
   121                              <1>         push    AX
   122                              <1>         call    proc_GetInt
   123                              <1>         mov     %1,AX
   124                              <1> 	  pop     AX
   125                              <1> %else 
   126                              <1>         call  proc_GetInt
   127                              <1> %endif
   128                              <1> %endmacro
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> 
   131                              <1> ;;-------------------------------------------------------------------
   132                              <1> %macro  PutLInt  1
   133                              <1>         push    EAX
   134                              <1>         mov     EAX,%1
   135                              <1>         call    proc_PutLInt
   136                              <1>         pop     EAX
   137                              <1> %endmacro
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> 
   140                              <1> ;;-------------------------------------------------------------------
   141                              <1> %macro  GetLInt  1
   142                              <1> %ifnidni %1,EAX
   143                              <1>         push    EAX
   144                              <1>         call    proc_GetLInt
   145                              <1>         mov     %1,EAX
   146                              <1> 	  pop     EAX
   147                              <1> %else 
   148                              <1>         call  proc_GetLInt
   149                              <1> %endif
   150                              <1> %endmacro
   151                              <1> ;;-------------------------------------------------------------------
   152                              <1> 
     3                                  
     4                                  .DATA
    28                              <1>  segment .data
     5 00000000 506C6561736520456E-     inputMessage      db    "Please Enter Order of Square Matrix ", 0
     5 00000009 746572204F72646572-
     5 00000012 206F66205371756172-
     5 0000001B 65204D617472697820-
     5 00000024 00                 
     6 00000025 526F77204E6F2E2000      inputMessageRow   db    "Row No. ",0
     7 0000002E 3A2D2000                empty_character   db    ":- ",0
     8 00000032 416E73776572206973-     result_message    db    "Answer is :- ",0
     8 0000003B 203A2D2000         
     9 00000040 4D6174726978204120-     matrix_A_message  db    "Matrix A :",0
     9 00000049 3A00               
    10 0000004B 4D6174726978204220-     matrix_B_message  db    "Matrix B :",0
    10 00000054 3A00               
    11 00000056 4120582042203A00        matrix_C_message  db    "A X B :",0
    12 0000005E 41202B2042203A00        matrix_D_message  db    "A + B :",0
    13                                  
    14                                  .UDATA
    34                              <1>  segment .bss
    15 00000000 <res 194h>              matrix_A resd 101
    16 00000194 <res 194h>              matrix_B resd 101
    17 00000328 <res 194h>              matrix_C resd 101
    18 000004BC <res 194h>              matrix_D resd 101
    19 00000650 ????                    order    resw 1
    20                                  
    21                                  .CODE
    40                              <1>  segment .data
    41                              <1>  segment .bss
    42                              <1>  segment .text
    22                                      .STARTUP
    10                              <1> 
    11                              <1>  global _start
    12                              <1> _start:
    23 00000000 BB[00000000]                mov EBX,matrix_A            ;taking matrix A as input
    24 00000005 E8BB000000                  call matrixFormation
    25 0000000A BB[94010000]                mov EBX,matrix_B            ;taking matrix B as input
    26 0000000F E8B1000000                  call matrixFormation
    27                                  
    28                                      ;---------------
    29 00000014 68[28030000]                push matrix_C               ;calling multiplication funtion
    30 00000019 68[94010000]                push matrix_B
    31 0000001E 68[00000000]                push matrix_A
    32 00000023 E899010000                  call matrix_multiplication
    33                                  
    34                                      
    35                                  
    36                                      ;---------------
    37                                      nwln
    49 00000028 E8(00000000)        <1>  call proc_nwln
    38                                      PutStr matrix_A_message     ;printing result of multiplication
    66 0000002D 51                  <1>  push ECX
    67 0000002E B9[40000000]        <1>  mov ECX,%1
    68 00000033 E8(00000000)        <1>  call proc_PutStr
    69 00000038 59                  <1>  pop ECX
    39                                      nwln
    49 00000039 E8(00000000)        <1>  call proc_nwln
    40 0000003E B8[00000000]                mov EAX,matrix_A
    41 00000043 E80F010000                  call display_matrix
    42                                      nwln
    49 00000048 E8(00000000)        <1>  call proc_nwln
    43                                      PutStr matrix_B_message
    66 0000004D 51                  <1>  push ECX
    67 0000004E B9[4B000000]        <1>  mov ECX,%1
    68 00000053 E8(00000000)        <1>  call proc_PutStr
    69 00000058 59                  <1>  pop ECX
    44                                      nwln
    49 00000059 E8(00000000)        <1>  call proc_nwln
    45 0000005E B8[94010000]                mov EAX,matrix_B
    46 00000063 E8EF000000                  call display_matrix
    47                                      nwln
    49 00000068 E8(00000000)        <1>  call proc_nwln
    48                                      PutStr matrix_C_message
    66 0000006D 51                  <1>  push ECX
    67 0000006E B9[56000000]        <1>  mov ECX,%1
    68 00000073 E8(00000000)        <1>  call proc_PutStr
    69 00000078 59                  <1>  pop ECX
    49                                      nwln
    49 00000079 E8(00000000)        <1>  call proc_nwln
    50 0000007E B8[28030000]                mov EAX,matrix_C
    51 00000083 E8CF000000                  call display_matrix
    52                                      nwln
    49 00000088 E8(00000000)        <1>  call proc_nwln
    53                                  
    54 0000008D B8[00000000]                mov EAX, matrix_A
    55 00000092 BB[94010000]                mov EBX, matrix_B
    56 00000097 B9[BC040000]                mov ECX, matrix_D
    57 0000009C E8B7010000                  call matirx_addition
    58                                  
    59                                      PutStr matrix_D_message
    66 000000A1 51                  <1>  push ECX
    67 000000A2 B9[5E000000]        <1>  mov ECX,%1
    68 000000A7 E8(00000000)        <1>  call proc_PutStr
    69 000000AC 59                  <1>  pop ECX
    60                                      nwln
    49 000000AD E8(00000000)        <1>  call proc_nwln
    61 000000B2 B8[BC040000]                mov EAX,matrix_D
    62 000000B7 E89B000000                  call display_matrix
    63                                      
    64                                  done:
    65                                      .EXIT
    19 000000BC B801000000          <1>  mov EAX,1
    20 000000C1 31DB                <1>  xor EBX,EBX
    21 000000C3 CD80                <1>  int 0x80
    66                                  
    67                                  
    68                                  ;----------------------------------------------------Matrix Formation Funtion--------------------------------------------------------------------------------------------------------------------------------------------------------;
    69                                  
    70                                  matrixFormation :                       ;fution for taking matirx as input
    71 000000C5 53                          push EBX                            ;taking order of matrix as input
    72                                      PutStr inputMessage
    66 000000C6 51                  <1>  push ECX
    67 000000C7 B9[00000000]        <1>  mov ECX,%1
    68 000000CC E8(00000000)        <1>  call proc_PutStr
    69 000000D1 59                  <1>  pop ECX
    73                                      PutStr empty_character
    66 000000D2 51                  <1>  push ECX
    67 000000D3 B9[2E000000]        <1>  mov ECX,%1
    68 000000D8 E8(00000000)        <1>  call proc_PutStr
    69 000000DD 59                  <1>  pop ECX
    74                                      GetInt CX
   120                              <1> %ifnidni %1,AX
   121 000000DE 6650                <1>  push AX
   122 000000E0 E8(00000000)        <1>  call proc_GetInt
   123 000000E5 6689C1              <1>  mov %1,AX
   124 000000E8 6658                <1>  pop AX
   125                              <1> %else
   126                              <1>  call proc_GetInt
   127                              <1> %endif
    75                                      ;--------------
    76 000000EA 66890D[50060000]            mov [order],CX                      ;storing order of matrix in variable order
    77 000000F1 66890B                      mov [EBX],CX                        
    78                                      ;--------------
    79 000000F4 66B80100                    mov AX,1                            
    80 000000F8 66BA0000                    mov DX,0                            ;counter for number of rows
    81                                      ;--------------
    82                                  
    83                                      Row_Entry:                          ;funtion taking row of matrix as input 
    84 000000FC 663B15[50060000]                cmp DX ,[order]                 ;comparing row counter of rows to order of matirx    
    85 00000103 7450                            je matrixFormation_return    
    86                                          ;----------------
    87                                          PutStr inputMessageRow          ;printing message for takint row entry as input
    66 00000105 51                  <1>  push ECX
    67 00000106 B9[25000000]        <1>  mov ECX,%1
    68 0000010B E8(00000000)        <1>  call proc_PutStr
    69 00000110 59                  <1>  pop ECX
    88                                          PutInt DX
   110 00000111 6650                <1>  push AX
   111 00000113 6689D0              <1>  mov AX,%1
   112 00000116 E8(00000000)        <1>  call proc_PutInt
   113 0000011B 6658                <1>  pop AX
    89                                          PutStr empty_character
    66 0000011D 51                  <1>  push ECX
    67 0000011E B9[2E000000]        <1>  mov ECX,%1
    68 00000123 E8(00000000)        <1>  call proc_PutStr
    69 00000128 59                  <1>  pop ECX
    90                                          nwln
    49 00000129 E8(00000000)        <1>  call proc_nwln
    91                                          ;-----------------
    92                                      Coloum_Entry:                       ;funtion taking each entry of row
    93                                          GetInt  CX                      ;taing element of matrix as input
   120                              <1> %ifnidni %1,AX
   121 0000012E 6650                <1>  push AX
   122 00000130 E8(00000000)        <1>  call proc_GetInt
   123 00000135 6689C1              <1>  mov %1,AX
   124 00000138 6658                <1>  pop AX
   125                              <1> %else
   126                              <1>  call proc_GetInt
   127                              <1> %endif
    94 0000013A 83C304                          add EBX,4                       ;increasing storing address by 4 as we have stored order in first address and maintaing distance of 4 between two successive element
    95 0000013D 66890B                          mov [EBX],CX
    96                                          ;-----------------
    97 00000140 663B05[50060000]                cmp AX , [order]                ;after all entires completed in row go to next row
    98 00000147 7404                            je entry_next
    99                                          ;----------------
   100 00000149 6640                            inc AX                          ;increasing counter for how much entries are in row
   101 0000014B EBE1                            jmp Coloum_Entry
   102                                          ;-----------------
   103                                      entry_next:                         ;fution for setting all counters before goint to next row
   104 0000014D 66B80100                        mov AX,1                        
   105 00000151 6642                            inc DX                          ;as row entries completed incresing row number
   106 00000153 EBA7                            jmp Row_Entry
   107                                          ;-----------------
   108                                  
   109                                      matrixFormation_return:             ;fution return
   110 00000155 5B                              pop EBX                 
   111 00000156 C3                              ret
   112                                          
   113                                  
   114                                  ;-----------------------------------------------------------------------------------------------Matrix Display-------------------------------------------------------------------------------------------------------------------------
   115                                  
   116                                  display_matrix:                     ;fution for printing matix
   117 00000157 50                          push EAX
   118 00000158 66B90000                    mov CX,0
   119 0000015C 66BB0000                    mov BX,0
   120 00000160 89C2                        mov EDX,EAX
   121 00000162 83C004                      add EAX,4
   122                                      loop_row:
   123 00000165 663B0A                          cmp CX,[EDX]
   124 00000168 7455                            je display_matrix_return
   125                                          PutCh "["
    56 0000016A 6650                <1>  push AX
    57 0000016C B05B                <1>  mov AL,%1
    58 0000016E E8(00000000)        <1>  call proc_PutCh
    59 00000173 6658                <1>  pop AX
   126                                          PutCh " "
    56 00000175 6650                <1>  push AX
    57 00000177 B020                <1>  mov AL,%1
    58 00000179 E8(00000000)        <1>  call proc_PutCh
    59 0000017E 6658                <1>  pop AX
   127 00000180 EB00                            jmp loop_coloum
   128                                          
   129                                      loop_coloum:
   130                                          PutInt [EAX]
   110 00000182 6650                <1>  push AX
   111 00000184 668B00              <1>  mov AX,%1
   112 00000187 E8(00000000)        <1>  call proc_PutInt
   113 0000018C 6658                <1>  pop AX
   131                                          PutCh " "
    56 0000018E 6650                <1>  push AX
    57 00000190 B020                <1>  mov AL,%1
    58 00000192 E8(00000000)        <1>  call proc_PutCh
    59 00000197 6658                <1>  pop AX
   132 00000199 6683C301                        add BX,1
   133 0000019D 83C004                          add EAX,4
   134 000001A0 663B1A                          cmp BX,[EDX]
   135 000001A3 75DD                            jne loop_coloum
   136                                          PutCh "]"
    56 000001A5 6650                <1>  push AX
    57 000001A7 B05D                <1>  mov AL,%1
    58 000001A9 E8(00000000)        <1>  call proc_PutCh
    59 000001AE 6658                <1>  pop AX
   137                                          nwln
    49 000001B0 E8(00000000)        <1>  call proc_nwln
   138 000001B5 6683C101                        add CX,1
   139 000001B9 66BB0000                        mov BX,0
   140 000001BD EBA6                            jmp loop_row
   141                                          
   142                                          
   143                                      display_matrix_return:
   144 000001BF 58                              pop EAX
   145 000001C0 C3                              ret
   146                                  
   147                                  ;---------------------------------------------------------Matrix multiplication-------------------------------------------------------------------------------------------------------------;
   148                                  
   149                                  matrix_multiplication:  ;fution for multiplyint two matix
   150                                  
   151 000001C1 55                            Push ebp          ;pushing ebp                                                   
   152                                                                                        
   153 000001C2 89E5                          mov ebp, esp      ;shifting stack pointer to base pointer
   154                                  
   155                                                                                           
   156 000001C4 50                            Push EAX                              ;matrix_A      ebp+8 
   157 000001C5 53                            Push EBX                              ;matrix_B      ebp+12
   158 000001C6 51                            Push ECX                              ;matirx_C      ebp+16
   159 000001C7 52                            Push EDX                              ;size          ebp-16                                                        
   160 000001C8 83EC28                        sub esp, 40                           ;i          ebp-20                                
   161                                                                              ;j          ebp-24                                
   162                                                                              ;k          ebp-28    
   163                                                                              ;pointer    ebp-32                            
   164 000001CB 52                            Push EDX                              ;sum        ebp-36   
   165                                  
   166                                        
   167 000001CC 8B4D08                        mov ECX, [ebp+8]  ;get size of matrix_A
   168 000001CF 8B01                          mov EAX, [ECX]
   169                                  
   170                                  
   171 000001D1 8B5510                        mov EDX, [ebp+16]  ;set size of oualpha beta gamma delta epsilon tput matrix
   172 000001D4 8902                          mov [EDX], EAX
   173                                        
   174 000001D6 8945F0                        mov [ebp - 16], EAX
   175                                  
   176 000001D9 83C204                        add EDX, 4
   177                                              
   178                                        
   179                                  
   180                                                                ;matrix_C[i][j] = matrix_A[i][:] * matrix_B[:][j]
   181 000001DC B700                          mov BH, 0               ;for i in 0 to n-1
   182 000001DE 887DEC                        mov [ebp-20], BH
   183                                        loop_i:
   184 000001E1 B300                                mov BL, 0         ;for j in 0 to n-1
   185                                              loop_j:
   186 000001E3 8955E0                                    mov [ebp-32], EDX
   187 000001E6 885DE8                                    mov [ebp-24], BL
   188 000001E9 887DEC                                    mov [ebp-20], BH
   189 000001EC C745DC00000000                            mov dword [ebp-36], 0         ;Sum = 0
   190                                  
   191 000001F3 B300                                      mov BL, 0                     ;for k in 0 to n-1
   192                                                    
   193                                                    loop_k:
   194                                                                                  
   195 000001F5 8A7DEC                                          mov BH, [ebp-20]        ;get matrix_A[i][k] in EDX
   196 000001F8 8B4D08                                          mov ECX, [ebp+8]
   197 000001FB E847000000                                      call get_matrix_element
   198 00000200 89C2                                            mov EDX, EAX
   199                                  
   200 00000202 8B4D0C                                          mov ECX, [ebp+12]       ;get matrix_B[k][j] in EAX
   201 00000205 88DF                                            mov BH, BL
   202 00000207 8A5DE8                                          mov BL, [ebp-24]
   203 0000020A E838000000                                      call get_matrix_element
   204                                  
   205                                                          
   206                                        
   207 0000020F F7EA                                            imul EDX                 ;Sum += matrix_A[i][k] * matrix_B[k][j]
   208 00000211 0145DC                                          add [ebp-36], EAX
   209                                                          
   210 00000214 88FB                                            mov BL, BH
   211                                  
   212 00000216 FEC3                                            inc BL
   213 00000218 3A5DF0                                          cmp BL, [ebp -16]
   214 0000021B 7CD8                                            jl loop_k
   215                                                    ;nwln
   216 0000021D 8B55E0                                    mov EDX, [ebp-32]             ;*pointer = Sum
   217 00000220 8B45DC                                    mov EAX, [ebp-36]
   218 00000223 8902                                      mov [EDX], EAX
   219                                  
   220                                  
   221 00000225 8A5DE8                                    mov BL, [ebp-24]
   222 00000228 8A7DEC                                    mov BH, [ebp-20]
   223 0000022B 83C204                                    add EDX, 4
   224                                  
   225 0000022E FEC3                                      inc BL
   226 00000230 3A5DF0                                    cmp BL, [ebp-16]
   227 00000233 7CAE                                      jl loop_j
   228                                             
   229 00000235 FEC7                                inc BH
   230 00000237 3A7DF0                              cmp BH, [ebp-16]
   231 0000023A 7CA5                                jl loop_i
   232                                  
   233 0000023C 83C428                        add esp, 40
   234                                  
   235 0000023F 5A                            Pop EDX
   236 00000240 59                            Pop ECX
   237 00000241 5B                            Pop EBX
   238 00000242 58                            Pop EAX
   239                                  
   240 00000243 89EC                          mov esp, ebp
   241 00000245 5D                            Pop ebp
   242 00000246 C3                            ret
   243                                        ;--------------------
   244                                        get_matrix_element:           ;funtion for finding for element of matix
   245 00000247 B800000000                          mov EAX, 0              ;[offset = (i*n + j + 1)*4]
   246 0000024C 8A01                                mov AL, [ECX]
   247 0000024E F6E7                                mul BH
   248 00000250 00D8                                add AL, BL
   249 00000252 FEC0                                inc AL
   250                                  
   251 00000254 8B0481                              mov EAX, [ECX + EAX*4]
   252 00000257 C3                                  ret
   253                                  
   254                                  ;---------------------------------------------------Matrix Addition funtion-------------------------------------------------------------------------------------------------------------
   255                                  
   256                                  matirx_addition:
   257 00000258 50                          push EAX
   258 00000259 53                          push EBX
   259 0000025A 51                          push ECX
   260 0000025B 8B10                        mov EDX,[EAX]
   261 0000025D 8911                        mov [ECX],EDX
   262 0000025F 83C004                      add EAX,4
   263 00000262 83C304                      add EBX,4
   264 00000265 83C104                      add ECX,4
   265 00000268 BA00000000                  mov dword EDX,0
   266                                      loop_addition:
   267 0000026D 66833800                        cmp word[EAX],0
   268 00000271 7416                            je matirx_addition_return
   269 00000273 0310                            add EDX,[EAX]
   270 00000275 0313                            add EDX,[EBX]
   271 00000277 8911                            mov [ECX],EDX
   272 00000279 83C004                          add EAX,4
   273 0000027C 83C304                          add EBX,4
   274 0000027F 83C104                          add ECX,4
   275 00000282 BA00000000                      mov dword EDX,0
   276 00000287 EBE4                            jmp loop_addition
   277                                      matirx_addition_return:
   278 00000289 58                              pop EAX
   279 0000028A 5B                              pop EBX
   280 0000028B 59                              pop ECX
   281 0000028C C3                              ret
   282                                  
   283                                  ;-------------------------------------------------------------------------finished-------------------------------------------------------------------------------------------------
