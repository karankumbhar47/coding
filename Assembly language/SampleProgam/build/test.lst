     1                                  
     2                                  %include "io.mac"
     3                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     4                              <1> extern   proc_GetStr, proc_GetCh
     5                              <1> extern   proc_PutInt, proc_GetInt
     6                              <1> extern   proc_PutLInt, proc_GetLInt
     7                              <1> 
     8                              <1> ;;-------------------------------------------------------------------
     9                              <1> %macro  .STARTUP  0
    10                              <1> ;group dgroup .data .bss
    11                              <1>         global   _start
    12                              <1> _start:
    13                              <1> %endmacro
    14                              <1> ;;-------------------------------------------------------------------
    15                              <1> 
    16                              <1> 
    17                              <1> ;;-------------------------------------------------------------------
    18                              <1> %macro  .EXIT  0
    19                              <1>         mov    EAX,1
    20                              <1>         xor    EBX,EBX
    21                              <1>         int    0x80
    22                              <1> %endmacro
    23                              <1> ;;-------------------------------------------------------------------
    24                              <1> 
    25                              <1> 
    26                              <1> ;;-------------------------------------------------------------------
    27                              <1> %macro  .DATA 0
    28                              <1>         segment .data
    29                              <1> %endmacro
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> 
    32                              <1> ;;-------------------------------------------------------------------
    33                              <1> %macro  .UDATA 0
    34                              <1>         segment .bss
    35                              <1> %endmacro
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> 
    38                              <1> ;;-------------------------------------------------------------------
    39                              <1> %macro  .CODE 0
    40                              <1>         segment .data
    41                              <1>         segment .bss
    42                              <1>         segment .text
    43                              <1> %endmacro
    44                              <1> ;;-------------------------------------------------------------------
    45                              <1> 
    46                              <1> 
    47                              <1> ;;-------------------------------------------------------------------
    48                              <1> %macro  nwln  0 
    49                              <1>         call    proc_nwln
    50                              <1> %endmacro
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> 
    53                              <1> 
    54                              <1> ;;-------------------------------------------------------------------
    55                              <1> %macro  PutCh  1 
    56                              <1>         push    AX
    57                              <1>         mov     AL,%1
    58                              <1>         call    proc_PutCh
    59                              <1>         pop     AX
    60                              <1> %endmacro
    61                              <1> ;;-------------------------------------------------------------------
    62                              <1> 
    63                              <1> 
    64                              <1> ;;-------------------------------------------------------------------
    65                              <1> %macro  PutStr  1 
    66                              <1>         push    ECX
    67                              <1>         mov     ECX,%1
    68                              <1>         call    proc_PutStr
    69                              <1>         pop     ECX
    70                              <1> %endmacro
    71                              <1> ;;-------------------------------------------------------------------
    72                              <1> 
    73                              <1> 
    74                              <1> ;;-------------------------------------------------------------------
    75                              <1> %macro  GetStr  1-2 81
    76                              <1>         push    ESI
    77                              <1>         push    EDI
    78                              <1>         mov     EDI,%1
    79                              <1>         mov     ESI,%2
    80                              <1>         call    proc_GetStr
    81                              <1>         pop     EDI
    82                              <1>         pop     ESI
    83                              <1> %endmacro
    84                              <1> ;;-------------------------------------------------------------------
    85                              <1> 
    86                              <1> 
    87                              <1> ;;-------------------------------------------------------------------
    88                              <1> %macro  GetCh   1
    89                              <1>         push    SI
    90                              <1>         xor     SI,SI
    91                              <1> %ifidni %1,AL
    92                              <1>         ;inc     SI
    93                              <1>         call    proc_GetCh
    94                              <1> %elifidni %1,AH
    95                              <1>         mov     SI,1
    96                              <1>         call    proc_GetCh
    97                              <1> %else
    98                              <1>         push    AX
    99                              <1>         call    proc_GetCh
   100                              <1>         mov     %1,AL
   101                              <1>         pop     AX
   102                              <1> %endif
   103                              <1>         pop     SI
   104                              <1> %endmacro
   105                              <1> ;;-------------------------------------------------------------------
   106                              <1> 
   107                              <1> 
   108                              <1> ;;-------------------------------------------------------------------
   109                              <1> %macro  PutInt  1
   110                              <1>         push    AX
   111                              <1>         mov     AX,%1
   112                              <1>         call    proc_PutInt
   113                              <1>         pop     AX
   114                              <1> %endmacro
   115                              <1> ;;-------------------------------------------------------------------
   116                              <1> 
   117                              <1> 
   118                              <1> ;;-------------------------------------------------------------------
   119                              <1> %macro  GetInt  1
   120                              <1> %ifnidni %1,AX
   121                              <1>         push    AX
   122                              <1>         call    proc_GetInt
   123                              <1>         mov     %1,AX
   124                              <1> 	  pop     AX
   125                              <1> %else 
   126                              <1>         call  proc_GetInt
   127                              <1> %endif
   128                              <1> %endmacro
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> 
   131                              <1> ;;-------------------------------------------------------------------
   132                              <1> %macro  PutLInt  1
   133                              <1>         push    EAX
   134                              <1>         mov     EAX,%1
   135                              <1>         call    proc_PutLInt
   136                              <1>         pop     EAX
   137                              <1> %endmacro
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> 
   140                              <1> ;;-------------------------------------------------------------------
   141                              <1> %macro  GetLInt  1
   142                              <1> %ifnidni %1,EAX
   143                              <1>         push    EAX
   144                              <1>         call    proc_GetLInt
   145                              <1>         mov     %1,EAX
   146                              <1> 	  pop     EAX
   147                              <1> %else 
   148                              <1>         call  proc_GetLInt
   149                              <1> %endif
   150                              <1> %endmacro
   151                              <1> ;;-------------------------------------------------------------------
   152                              <1> 
     3                                  
     4                                  .DATA
    28                              <1>  segment .data
     5 00000000 506C6561736520456E-     inputMessage db  "Please Enter Order of Square Matrix ", 0
     5 00000009 746572204F72646572-
     5 00000012 206F66205371756172-
     5 0000001B 65204D617472697820-
     5 00000024 00                 
     6 00000025 526F77204E6F2E2000      inputMessageRow db "Row No. ",0
     7 0000002E 3A2D2000                empty_character db ":- ",0
     8 00000032 416E73776572206973-     result_message db "Answer is :- ",0
     8 0000003B 203A2D2000         
     9 00000040 4D6174726978204120-     matrix_A_message db "Matrix A :",0
     9 00000049 3A00               
    10 0000004B 4D6174726978204220-     matrix_B_message db "Matrix B :",0
    10 00000054 3A00               
    11 00000056 4120582042203A00        matrix_C_message db "A X B :",0
    12                                  
    13                                  .UDATA
    34                              <1>  segment .bss
    14 00000000 <res 194h>              matrix_A resd 101
    15 00000194 <res 194h>              matrix_B resd 101
    16 00000328 <res 194h>              matrix_C resd 101
    17 000004BC ????                    order resw 1
    18                                  
    19                                  .CODE
    40                              <1>  segment .data
    41                              <1>  segment .bss
    42                              <1>  segment .text
    20                                      .STARTUP
    10                              <1> 
    11                              <1>  global _start
    12                              <1> _start:
    21 00000000 BB[00000000]                mov EBX,matrix_A
    22 00000005 E887000000                  call matrixFormation
    23 0000000A BB[94010000]                mov EBX,matrix_B
    24 0000000F E87D000000                  call matrixFormation
    25 00000014 68[28030000]                push matrix_C
    26 00000019 68[94010000]                push matrix_B
    27 0000001E 68[00000000]                push matrix_A
    28 00000023 E86A010000                  call matrix_mult
    29                                      nwln
    49 00000028 E8(00000000)        <1>  call proc_nwln
    30                                      PutStr matrix_A_message
    66 0000002D 51                  <1>  push ECX
    67 0000002E B9[40000000]        <1>  mov ECX,%1
    68 00000033 E8(00000000)        <1>  call proc_PutStr
    69 00000038 59                  <1>  pop ECX
    31                                      nwln
    49 00000039 E8(00000000)        <1>  call proc_nwln
    32 0000003E B8[00000000]                mov EAX,matrix_A
    33 00000043 E8E0000000                  call display_matrix
    34                                      nwln
    49 00000048 E8(00000000)        <1>  call proc_nwln
    35                                      PutStr matrix_B_message
    66 0000004D 51                  <1>  push ECX
    67 0000004E B9[4B000000]        <1>  mov ECX,%1
    68 00000053 E8(00000000)        <1>  call proc_PutStr
    69 00000058 59                  <1>  pop ECX
    36                                      nwln
    49 00000059 E8(00000000)        <1>  call proc_nwln
    37 0000005E B8[94010000]                mov EAX,matrix_B
    38 00000063 E8C0000000                  call display_matrix
    39                                      nwln
    49 00000068 E8(00000000)        <1>  call proc_nwln
    40                                      PutStr matrix_C_message
    66 0000006D 51                  <1>  push ECX
    67 0000006E B9[56000000]        <1>  mov ECX,%1
    68 00000073 E8(00000000)        <1>  call proc_PutStr
    69 00000078 59                  <1>  pop ECX
    41                                      nwln
    49 00000079 E8(00000000)        <1>  call proc_nwln
    42 0000007E B8[28030000]                mov EAX,matrix_C
    43 00000083 E8A0000000                  call display_matrix
    44                                      
    45                                  done:
    46                                      .EXIT
    19 00000088 B801000000          <1>  mov EAX,1
    20 0000008D 31DB                <1>  xor EBX,EBX
    21 0000008F CD80                <1>  int 0x80
    47                                  
    48                                  
    49                                  ;---------------------Matrix Formation--------------------------;
    50                                  
    51                                  matrixFormation :
    52 00000091 53                          push EBX
    53                                      PutStr inputMessage
    66 00000092 51                  <1>  push ECX
    67 00000093 B9[00000000]        <1>  mov ECX,%1
    68 00000098 E8(00000000)        <1>  call proc_PutStr
    69 0000009D 59                  <1>  pop ECX
    54                                      PutStr empty_character
    66 0000009E 51                  <1>  push ECX
    67 0000009F B9[2E000000]        <1>  mov ECX,%1
    68 000000A4 E8(00000000)        <1>  call proc_PutStr
    69 000000A9 59                  <1>  pop ECX
    55                                      nwln
    49 000000AA E8(00000000)        <1>  call proc_nwln
    56                                      GetInt CX
   120                              <1> %ifnidni %1,AX
   121 000000AF 6650                <1>  push AX
   122 000000B1 E8(00000000)        <1>  call proc_GetInt
   123 000000B6 6689C1              <1>  mov %1,AX
   124 000000B9 6658                <1>  pop AX
   125                              <1> %else
   126                              <1>  call proc_GetInt
   127                              <1> %endif
    57 000000BB 66890D[BC040000]            mov [order],CX
    58 000000C2 66890B                      mov [EBX],CX
    59 000000C5 66B80100                    mov AX,1
    60 000000C9 66BA0000                    mov DX,0    ;row numberEB
    61                                  
    62                                      Row_Entry:
    63 000000CD 663B15[BC040000]                cmp DX ,[order]
    64 000000D4 7450                            je matrixFormation_return
    65                                          PutStr inputMessageRow
    66 000000D6 51                  <1>  push ECX
    67 000000D7 B9[25000000]        <1>  mov ECX,%1
    68 000000DC E8(00000000)        <1>  call proc_PutStr
    69 000000E1 59                  <1>  pop ECX
    66                                          PutInt DX
   110 000000E2 6650                <1>  push AX
   111 000000E4 6689D0              <1>  mov AX,%1
   112 000000E7 E8(00000000)        <1>  call proc_PutInt
   113 000000EC 6658                <1>  pop AX
    67                                          PutStr empty_character
    66 000000EE 51                  <1>  push ECX
    67 000000EF B9[2E000000]        <1>  mov ECX,%1
    68 000000F4 E8(00000000)        <1>  call proc_PutStr
    69 000000F9 59                  <1>  pop ECX
    68                                          nwln
    49 000000FA E8(00000000)        <1>  call proc_nwln
    69                                      Coloum_Entry:
    70                                          GetInt  CX
   120                              <1> %ifnidni %1,AX
   121 000000FF 6650                <1>  push AX
   122 00000101 E8(00000000)        <1>  call proc_GetInt
   123 00000106 6689C1              <1>  mov %1,AX
   124 00000109 6658                <1>  pop AX
   125                              <1> %else
   126                              <1>  call proc_GetInt
   127                              <1> %endif
    71 0000010B 83C304                          add EBX,4
    72 0000010E 66890B                          mov [EBX],CX
    73 00000111 663B05[BC040000]                cmp AX , [order]
    74 00000118 7404                            je entry_next
    75 0000011A 6640                            inc AX
    76 0000011C EBE1                            jmp Coloum_Entry
    77                                          
    78                                      entry_next: 
    79 0000011E 66B80100                        mov AX,1
    80 00000122 6642                            inc DX
    81 00000124 EBA7                            jmp Row_Entry
    82                                  
    83                                      matrixFormation_return:
    84 00000126 5B                              pop EBX
    85 00000127 C3                              ret
    86                                  
    87                                  ;--------------------------------------Matrix Display------------------------------------------------------------
    88                                  
    89                                  display_matrix:
    90 00000128 50                          push EAX
    91 00000129 66B90000                    mov CX,0
    92 0000012D 66BB0000                    mov BX,0
    93 00000131 89C2                        mov EDX,EAX
    94 00000133 83C004                      add EAX,4
    95                                      loop_row:
    96 00000136 663B0A                          cmp CX,[EDX]
    97 00000139 7455                            je display_matrix_return
    98                                          PutCh "["
    56 0000013B 6650                <1>  push AX
    57 0000013D B05B                <1>  mov AL,%1
    58 0000013F E8(00000000)        <1>  call proc_PutCh
    59 00000144 6658                <1>  pop AX
    99                                          PutCh " "
    56 00000146 6650                <1>  push AX
    57 00000148 B020                <1>  mov AL,%1
    58 0000014A E8(00000000)        <1>  call proc_PutCh
    59 0000014F 6658                <1>  pop AX
   100 00000151 EB00                            jmp loop_coloum
   101                                          
   102                                      loop_coloum:
   103                                          PutInt [EAX]
   110 00000153 6650                <1>  push AX
   111 00000155 668B00              <1>  mov AX,%1
   112 00000158 E8(00000000)        <1>  call proc_PutInt
   113 0000015D 6658                <1>  pop AX
   104                                          PutCh " "
    56 0000015F 6650                <1>  push AX
    57 00000161 B020                <1>  mov AL,%1
    58 00000163 E8(00000000)        <1>  call proc_PutCh
    59 00000168 6658                <1>  pop AX
   105 0000016A 6683C301                        add BX,1
   106 0000016E 83C004                          add EAX,4
   107 00000171 663B1A                          cmp BX,[EDX]
   108 00000174 75DD                            jne loop_coloum
   109                                          PutCh "]"
    56 00000176 6650                <1>  push AX
    57 00000178 B05D                <1>  mov AL,%1
    58 0000017A E8(00000000)        <1>  call proc_PutCh
    59 0000017F 6658                <1>  pop AX
   110                                          nwln
    49 00000181 E8(00000000)        <1>  call proc_nwln
   111 00000186 6683C101                        add CX,1
   112 0000018A 66BB0000                        mov BX,0
   113 0000018E EBA6                            jmp loop_row
   114                                          
   115                                          
   116                                      display_matrix_return:
   117 00000190 58                              pop EAX
   118 00000191 C3                              ret
   119                                  
   120                                  ;---------------------Matrix multiplication------------------------;
   121                                  
   122                                  matrix_mult:
   123                                  
   124 00000192 55                            Push ebp                                                 
   125                                                                                        
   126                                                                                        
   127 00000193 89E5                          mov ebp, esp
   128                                  
   129                                                          ;matrix_A      ebp+8                                 
   130 00000195 50                            Push EAX          ;matrix_B      ebp+12 
   131 00000196 53                            Push EBX          ;matirx_C      ebp+16
   132 00000197 51                            Push ECX          ;size          ebp-16
   133 00000198 52                            Push EDX             
   134                                                                                          
   135 00000199 83EC28                        sub esp, 40       ;i          ebp-20                                
   136                                                          ;j          ebp-24                                
   137                                                          ;k          ebp-28    
   138                                                          ;pointer    ebp-32                            
   139 0000019C 52                            Push EDX          ;sum        ebp-36   
   140                                  
   141                                        
   142 0000019D 8B4D08                        mov ECX, [ebp+8]  ;get size of matrix_A
   143 000001A0 8B01                          mov EAX, [ECX]
   144                                  
   145                                  
   146 000001A2 8B5510                        mov EDX, [ebp+16]  ;set size of output matrix
   147 000001A5 8902                          mov [EDX], EAX
   148                                        
   149 000001A7 8945F0                        mov [ebp - 16], EAX
   150                                  
   151 000001AA 83C204                        add EDX, 4
   152                                              
   153                                        
   154                                  
   155                                                                ;matC[i][j] = matrix_A[i][:] * matrix_B[:][j]
   156 000001AD B700                          mov BH, 0               ;for i in 0 to n-1
   157 000001AF 887DEC                        mov [ebp-20], BH
   158                                        loop_i:
   159 000001B2 B300                                mov BL, 0         ;for j in 0 to n-1
   160                                              loop_j:
   161 000001B4 8955E0                                    mov [ebp-32], EDX
   162 000001B7 885DE8                                    mov [ebp-24], BL
   163 000001BA 887DEC                                    mov [ebp-20], BH
   164 000001BD C745DC00000000                            mov dword [ebp-36], 0         ;Sum = 0
   165                                  
   166 000001C4 B300                                      mov BL, 0                     ;for k in 0 to n-1
   167                                                    
   168                                                    loop_k:
   169                                                                                  
   170 000001C6 8A7DEC                                          mov BH, [ebp-20]        ;get matrix_A[i][k] in EDX
   171 000001C9 8B4D08                                          mov ECX, [ebp+8]
   172 000001CC E847000000                                      call get_matrix_element
   173 000001D1 89C2                                            mov EDX, EAX
   174                                  
   175 000001D3 8B4D0C                                          mov ECX, [ebp+12]       ;get matrix_B[k][j] in EAX
   176 000001D6 88DF                                            mov BH, BL
   177 000001D8 8A5DE8                                          mov BL, [ebp-24]
   178 000001DB E838000000                                      call get_matrix_element
   179                                  
   180                                                          
   181                                        
   182 000001E0 F7EA                                            imul EDX                 ;Sum += matrix_A[i][k] * matrix_B[k][j]
   183 000001E2 0145DC                                          add [ebp-36], EAX
   184                                                          
   185 000001E5 88FB                                            mov BL, BH
   186                                  
   187 000001E7 FEC3                                            inc BL
   188 000001E9 3A5DF0                                          cmp BL, [ebp -16]
   189 000001EC 7CD8                                            jl loop_k
   190                                                    ;nwln
   191 000001EE 8B55E0                                    mov EDX, [ebp-32]             ;*pointer = Sum
   192 000001F1 8B45DC                                    mov EAX, [ebp-36]
   193 000001F4 8902                                      mov [EDX], EAX
   194                                  
   195                                  
   196 000001F6 8A5DE8                                    mov BL, [ebp-24]
   197 000001F9 8A7DEC                                    mov BH, [ebp-20]
   198 000001FC 83C204                                    add EDX, 4
   199                                  
   200 000001FF FEC3                                      inc BL
   201 00000201 3A5DF0                                    cmp BL, [ebp-16]
   202 00000204 7CAE                                      jl loop_j
   203                                             
   204 00000206 FEC7                                inc BH
   205 00000208 3A7DF0                              cmp BH, [ebp-16]
   206 0000020B 7CA5                                jl loop_i
   207                                  
   208 0000020D 83C428                        add esp, 40
   209                                  
   210 00000210 5A                            Pop EDX
   211 00000211 59                            Pop ECX
   212 00000212 5B                            Pop EBX
   213 00000213 58                            Pop EAX
   214                                  
   215 00000214 89EC                          mov esp, ebp
   216 00000216 5D                            Pop ebp
   217 00000217 C3                            ret
   218                                  
   219                                        get_matrix_element:       
   220 00000218 B800000000                          mov EAX, 0              ;[offset = (i*n + j + 1)*4]
   221 0000021D 8A01                                mov AL, [ECX]
   222 0000021F F6E7                                mul BH
   223 00000221 00D8                                add AL, BL
   224 00000223 FEC0                                inc AL
   225                                  
   226 00000225 8B0481                              mov EAX, [ECX + EAX*4]
   227                                  
   228 00000228 C3                                  ret
