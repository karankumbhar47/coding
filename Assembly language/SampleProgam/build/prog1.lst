     1                                  ;       Objective: find the sum of two numbers 
     2                                  ;       Input: Requests two  integers  from the user.
     3                                  ;       Output: Outputs the input number.
     4                                  %include "io.mac"
     5                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     6                              <1> extern   proc_GetStr, proc_GetCh
     7                              <1> extern   proc_PutInt, proc_GetInt
     8                              <1> extern   proc_PutLInt, proc_GetLInt
     9                              <1> 
    10                              <1> ;;-------------------------------------------------------------------
    11                              <1> %macro  .STARTUP  0
    12                              <1> ;group dgroup .data .bss
    13                              <1>         global   _start
    14                              <1> _start:
    15                              <1> %endmacro
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> 
    18                              <1> 
    19                              <1> ;;-------------------------------------------------------------------
    20                              <1> %macro  .EXIT  0
    21                              <1>         mov    EAX,1
    22                              <1>         xor    EBX,EBX
    23                              <1>         int    0x80
    24                              <1> %endmacro
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> 
    27                              <1> 
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> %macro  .DATA 0
    30                              <1>         segment .data
    31                              <1> %endmacro
    32                              <1> ;;-------------------------------------------------------------------
    33                              <1> 
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> %macro  .UDATA 0
    36                              <1>         segment .bss
    37                              <1> %endmacro
    38                              <1> ;;-------------------------------------------------------------------
    39                              <1> 
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> %macro  .CODE 0
    42                              <1>         segment .data
    43                              <1>         segment .bss
    44                              <1>         segment .text
    45                              <1> %endmacro
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> 
    48                              <1> 
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> %macro  nwln  0 
    51                              <1>         call    proc_nwln
    52                              <1> %endmacro
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> 
    55                              <1> 
    56                              <1> ;;-------------------------------------------------------------------
    57                              <1> %macro  PutCh  1 
    58                              <1>         push    AX
    59                              <1>         mov     AL,%1
    60                              <1>         call    proc_PutCh
    61                              <1>         pop     AX
    62                              <1> %endmacro
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> 
    65                              <1> 
    66                              <1> ;;-------------------------------------------------------------------
    67                              <1> %macro  PutStr  1 
    68                              <1>         push    ECX
    69                              <1>         mov     ECX,%1
    70                              <1>         call    proc_PutStr
    71                              <1>         pop     ECX
    72                              <1> %endmacro
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> 
    75                              <1> 
    76                              <1> ;;-------------------------------------------------------------------
    77                              <1> %macro  GetStr  1-2 81
    78                              <1>         push    ESI
    79                              <1>         push    EDI
    80                              <1>         mov     EDI,%1
    81                              <1>         mov     ESI,%2
    82                              <1>         call    proc_GetStr
    83                              <1>         pop     EDI
    84                              <1>         pop     ESI
    85                              <1> %endmacro
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> 
    88                              <1> 
    89                              <1> ;;-------------------------------------------------------------------
    90                              <1> %macro  GetCh   1
    91                              <1>         push    SI
    92                              <1>         xor     SI,SI
    93                              <1> %ifidni %1,AL
    94                              <1>         ;inc     SI
    95                              <1>         call    proc_GetCh
    96                              <1> %elifidni %1,AH
    97                              <1>         mov     SI,1
    98                              <1>         call    proc_GetCh
    99                              <1> %else
   100                              <1>         push    AX
   101                              <1>         call    proc_GetCh
   102                              <1>         mov     %1,AL
   103                              <1>         pop     AX
   104                              <1> %endif
   105                              <1>         pop     SI
   106                              <1> %endmacro
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> 
   109                              <1> 
   110                              <1> ;;-------------------------------------------------------------------
   111                              <1> %macro  PutInt  1
   112                              <1>         push    AX
   113                              <1>         mov     AX,%1
   114                              <1>         call    proc_PutInt
   115                              <1>         pop     AX
   116                              <1> %endmacro
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> 
   119                              <1> 
   120                              <1> ;;-------------------------------------------------------------------
   121                              <1> %macro  GetInt  1
   122                              <1> %ifnidni %1,AX
   123                              <1>         push    AX
   124                              <1>         call    proc_GetInt
   125                              <1>         mov     %1,AX
   126                              <1> 	  pop     AX
   127                              <1> %else 
   128                              <1>         call  proc_GetInt
   129                              <1> %endif
   130                              <1> %endmacro
   131                              <1> ;;-------------------------------------------------------------------
   132                              <1> 
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> %macro  PutLInt  1
   135                              <1>         push    EAX
   136                              <1>         mov     EAX,%1
   137                              <1>         call    proc_PutLInt
   138                              <1>         pop     EAX
   139                              <1> %endmacro
   140                              <1> ;;-------------------------------------------------------------------
   141                              <1> 
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> %macro  GetLInt  1
   144                              <1> %ifnidni %1,EAX
   145                              <1>         push    EAX
   146                              <1>         call    proc_GetLInt
   147                              <1>         mov     %1,EAX
   148                              <1> 	  pop     EAX
   149                              <1> %else 
   150                              <1>         call  proc_GetLInt
   151                              <1> %endif
   152                              <1> %endmacro
   153                              <1> ;;-------------------------------------------------------------------
   154                              <1> 
     5                                  
     6                                  .DATA
    30                              <1>  segment .data
     7 00000000 6248                    n1          dw   4862h 
     8 00000002 434F564944              ch1         db   "COVID"
     9 00000007 506C6561736520696E-     prompt_msg1  db   "Please input the first number: ",0
     9 00000010 707574207468652066-
     9 00000019 69727374206E756D62-
     9 00000022 65723A2000         
    10 00000027 506C6561736520696E-     prompt_msg2  db   "Please input the second  number : ",0
    10 00000030 707574207468652073-
    10 00000039 65636F6E6420206E75-
    10 00000042 6D626572203A2000   
    11 0000004A 5468652073756D2069-     output_msg  db   "The sum is : ",0
    11 00000053 73203A2000         
    12                                  ;.UDATA 
    13                                  ;number1   resd   1
    14                                  ;number2   resb   1
    15                                  ;number2   resb   1
    16                                  .CODE
    42                              <1>  segment .data
    43                              <1>  segment .bss
    44                              <1>  segment .text
    17                                        .STARTUP
    12                              <1> 
    13                              <1>  global _start
    14                              <1> _start:
    18                                        ; PutLInt n1
    19                                        ; nwln
    20                                        ; PutLInt ch1
    21                                        PutStr  prompt_msg1   ; request first number 
    68 00000000 51                  <1>  push ECX
    69 00000001 B9[07000000]        <1>  mov ECX,%1
    70 00000006 E8(00000000)        <1>  call proc_PutStr
    71 0000000B 59                  <1>  pop ECX
    22                                        GetInt CX             ; CX= first number  
   122                              <1> %ifnidni %1,AX
   123 0000000C 6650                <1>  push AX
   124 0000000E E8(00000000)        <1>  call proc_GetInt
   125 00000013 6689C1              <1>  mov %1,AX
   126 00000016 6658                <1>  pop AX
   127                              <1> %else
   128                              <1>  call proc_GetInt
   129                              <1> %endif
    23                                  
    24                                        PutStr  prompt_msg2   ; request second number 
    68 00000018 51                  <1>  push ECX
    69 00000019 B9[27000000]        <1>  mov ECX,%1
    70 0000001E E8(00000000)        <1>  call proc_PutStr
    71 00000023 59                  <1>  pop ECX
    25                                        GetInt DX             ; DX= second number  
   122                              <1> %ifnidni %1,AX
   123 00000024 6650                <1>  push AX
   124 00000026 E8(00000000)        <1>  call proc_GetInt
   125 0000002B 6689C2              <1>  mov %1,AX
   126 0000002E 6658                <1>  pop AX
   127                              <1> %else
   128                              <1>  call proc_GetInt
   129                              <1> %endif
    26                                        
    27                                        GetInt BX 
   122                              <1> %ifnidni %1,AX
   123 00000030 6650                <1>  push AX
   124 00000032 E8(00000000)        <1>  call proc_GetInt
   125 00000037 6689C3              <1>  mov %1,AX
   126 0000003A 6658                <1>  pop AX
   127                              <1> %else
   128                              <1>  call proc_GetInt
   129                              <1> %endif
    28                                  
    29 0000003C 6689C8                        mov AX, CX
    30 0000003F 6601D0                        add AX, DX      
    31                                        PutStr  output_msg   
    68 00000042 51                  <1>  push ECX
    69 00000043 B9[4A000000]        <1>  mov ECX,%1
    70 00000048 E8(00000000)        <1>  call proc_PutStr
    71 0000004D 59                  <1>  pop ECX
    32                                        PutInt   AX
   112 0000004E 6650                <1>  push AX
   113 00000050 6689C0              <1>  mov AX,%1
   114 00000053 E8(00000000)        <1>  call proc_PutInt
   115 00000058 6658                <1>  pop AX
    33                                    nwln
    51 0000005A E8(00000000)        <1>  call proc_nwln
    34                                        PutInt   BX                                                                         
   112 0000005F 6650                <1>  push AX
   113 00000061 6689D8              <1>  mov AX,%1
   114 00000064 E8(00000000)        <1>  call proc_PutInt
   115 00000069 6658                <1>  pop AX
    35                                    nwln 
    51 0000006B E8(00000000)        <1>  call proc_nwln
    36                                  done:
    37                                        .EXIT
    21 00000070 B801000000          <1>  mov EAX,1
    22 00000075 31DB                <1>  xor EBX,EBX
    23 00000077 CD80                <1>  int 0x80
    38                                  
    39                                  
    40                                  
    41                                  
    42                                  
    43                                  
    44                                  
